diff -Naur browsermt-marian-dev.bak/CMakeLists.txt browsermt-marian-dev/CMakeLists.txt
--- browsermt-marian-dev.bak/CMakeLists.txt	2023-06-01 20:13:41.351269359 -0400
+++ browsermt-marian-dev/CMakeLists.txt	2023-06-02 07:07:18.757839602 -0400
@@ -377,20 +377,20 @@
   # We want to compile as many targets as possible but different CUDA versions support different targets.
   # Let's instead enable options based on what cuda version we have.
   if((CUDA_VERSION VERSION_EQUAL "9.0" OR CUDA_VERSION VERSION_GREATER "9.0") AND CUDA_VERSION VERSION_LESS "11.0")
-    option(COMPILE_CUDA_SM35 "Compile GPU version with SM35 support" ON)
+    option(COMPILE_CUDA_SM35 "Compile GPU version with SM35 support" OFF)
     option(COMPILE_CUDA_SM50 "Compile GPU version with SM50 support" ON)
     option(COMPILE_CUDA_SM60 "Compile GPU version with SM60 support" ON)
     option(COMPILE_CUDA_SM70 "Compile GPU version with SM70 support" ON)
   endif()
   if((CUDA_VERSION VERSION_EQUAL "10.0" OR CUDA_VERSION VERSION_GREATER "10.0") AND CUDA_VERSION VERSION_LESS "11.0")
-    option(COMPILE_CUDA_SM35 "Compile GPU version with SM35 support" ON)
+    option(COMPILE_CUDA_SM35 "Compile GPU version with SM35 support" OFF)
     option(COMPILE_CUDA_SM50 "Compile GPU version with SM50 support" ON)
     option(COMPILE_CUDA_SM60 "Compile GPU version with SM60 support" ON)
     option(COMPILE_CUDA_SM70 "Compile GPU version with SM70 support" ON)
     option(COMPILE_CUDA_SM75 "Compile GPU version with SM75 support" ON)
   endif()
   if(CUDA_VERSION VERSION_EQUAL "11.0" OR CUDA_VERSION VERSION_GREATER "11.0")
-    option(COMPILE_CUDA_SM35 "Compile GPU version with SM35 support" ON)
+    option(COMPILE_CUDA_SM35 "Compile GPU version with SM35 support" OFF)
     option(COMPILE_CUDA_SM50 "Compile GPU version with SM50 support" ON)
     option(COMPILE_CUDA_SM60 "Compile GPU version with SM60 support" ON)
     option(COMPILE_CUDA_SM70 "Compile GPU version with SM70 support" ON)
diff -Naur browsermt-marian-dev.bak/src/3rd_party/fbgemm/src/RefImplementations.cc browsermt-marian-dev/src/3rd_party/fbgemm/src/RefImplementations.cc
--- browsermt-marian-dev.bak/src/3rd_party/fbgemm/src/RefImplementations.cc	2023-06-01 20:14:27.376440856 -0400
+++ browsermt-marian-dev/src/3rd_party/fbgemm/src/RefImplementations.cc	2023-06-01 20:01:21.124240843 -0400
@@ -12,6 +12,7 @@
 #include <cassert>
 #include <cmath>
 #include <cstring>
+#include <limits>
 
 using namespace std;
 
diff -Naur browsermt-marian-dev.bak/src/tensors/gpu/add_all.inc browsermt-marian-dev/src/tensors/gpu/add_all.inc
--- browsermt-marian-dev.bak/src/tensors/gpu/add_all.inc	2023-06-01 19:58:41.817439641 -0400
+++ browsermt-marian-dev/src/tensors/gpu/add_all.inc	2023-06-02 10:29:18.811776577 -0400
@@ -23,6 +23,7 @@
 template void AggregateAll<float, float, BinaryFunctor<elem::Mult, BinaryFunctor<elem::Leq, Assignee<2>, Assignee<3>>, Assignee<1>>, BinaryFunctor<elem::Plus, Assignee<1>, Assignee<2>>>(std::shared_ptr<Allocator>, BinaryFunctor<elem::Mult, BinaryFunctor<elem::Leq, Assignee<2>, Assignee<3>>, Assignee<1>>, float, BinaryFunctor<elem::Plus, Assignee<1>, Assignee<2>>, float, marian::Tensor, marian::Tensor, marian::Tensor, marian::Tensor);
 template void AggregateAll<float, float, BinaryFunctor<elem::Mult, Assignee<1>, UnaryFunctor<elem::Sigmoid, BinaryFunctor<elem::Minus, Assignee<2>, Assignee<3>>>>, BinaryFunctor<elem::Plus, Assignee<1>, Assignee<2>>>(std::shared_ptr<Allocator>, BinaryFunctor<elem::Mult, Assignee<1>, UnaryFunctor<elem::Sigmoid, BinaryFunctor<elem::Minus, Assignee<2>, Assignee<3>>>>, float, BinaryFunctor<elem::Plus, Assignee<1>, Assignee<2>>, float, marian::Tensor, marian::Tensor, marian::Tensor, marian::Tensor);
 template void AggregateAll<float, float, BinaryFunctor<elem::Div, Assignee<1>, Assignee<2>>, BinaryFunctor<elem::Plus, Assignee<1>, Assignee<2>>>(std::shared_ptr<Allocator>, BinaryFunctor<elem::Div, Assignee<1>, Assignee<2>>, float, BinaryFunctor<elem::Plus, Assignee<1>, Assignee<2>>, float, marian::Tensor, marian::Tensor, marian::Tensor);
+template void AggregateAll<float, float, Assignee<1>, BinaryFunctor<elem::Plus, Assignee<1>, Assignee<2>>>(std::shared_ptr<Allocator>, Assignee<1>, float, BinaryFunctor<elem::Plus, Assignee<1>, Assignee<2>>, float, marian::Tensor, marian::Tensor);
 template void AggregateAll<float, float, Assignee<1>, BinaryFunctor<elem::Min, Assignee<1>, Assignee<2>>>(std::shared_ptr<Allocator>, Assignee<1>, float, BinaryFunctor<elem::Min, Assignee<1>, Assignee<2>>, float, marian::Tensor, marian::Tensor);
 template void AggregateAll<float, float, Assignee<1>, BinaryFunctor<elem::Max, Assignee<1>, Assignee<2>>>(std::shared_ptr<Allocator>, Assignee<1>, float, BinaryFunctor<elem::Max, Assignee<1>, Assignee<2>>, float, marian::Tensor, marian::Tensor);
 template void AggregateAll<float, float, Assignee<1>, BinaryFunctor<elem::Mult, Assignee<1>, Assignee<2>>>(std::shared_ptr<Allocator>, Assignee<1>, float, BinaryFunctor<elem::Mult, Assignee<1>, Assignee<2>>, float, marian::Tensor, marian::Tensor);
